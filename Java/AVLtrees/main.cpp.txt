	import java.util.Scanner;
 
public class main
{
    private static Scanner sc = new Scanner(System.in);
 
    public static void main(String[] args)
    {
        Tree tree = new Tree();
 
        while (true)
        {
            int cislo = sc.nextInt();
            tree.root = tree.insert(tree.root, cislo);
            if (cislo == -1)
                break;
        }
        System.out.println("PREORDER");
        tree.root.preorder(tree.root);
 
        System.out.println("\nINORDER");
        tree.root.inorder(tree.root);
 
        System.out.println("\nPOSTORDER");
        tree.root.postorder(tree.root);
    }
 
    private static class Node
    {
        int value;
        int height;
 
        Node left;
        Node right;
 
        private Node(int value)
        {
            this.value = value;
            this.height = 1;
        }
        
        void preorder(Node n)
        {
            if (n != null)
            {
                print(n);
                preorder(n.left);
                preorder(n.right);
            }
        }
        void inorder(Node n)
        {
            if (n != null)
            {
                inorder(n.left);
                print(n);
                inorder(n.right);
            }
        }
        void postorder(Node n)
        {
            if (n != null)
            {
                postorder(n.left);
                postorder(n.right);
                print(n);
            }
        }
        public void print(Node n) {
            System.out.print(n.value + ",");
        }
    }
 
    private static class Tree
    {
        Node root;
 
        int getHeight(Node node)
        {
            if (node == null)return 0;
            return node.height;
        }
 
        Node rotation(Node n, int s)
        {
            if (s==1)
            {
                Node a = n.left;
                Node b = a.right;
                a.right = n;
                n.left = b;
                n.height = Math.max(getHeight(n.left), getHeight(n.right)) + 1;
                a.height = Math.max(getHeight(a.left), getHeight(a.right)) + 1;
                return a;
            }else{
                Node a = n.right;
                Node b = a.left;
                a.left = n;
                n.right = b;
                n.height = Math.max(getHeight(n.left), getHeight(n.right)) + 1;
                a.height = Math.max(getHeight(a.left), getHeight(a.right)) + 1;
                return a;
            }
        }
 
        Node insert(Node n, int value)
        {
            if (n == null)return (new Node(value));
            
            if (value <= n.value)
                n.left = insert(n.left, value);
            else n.right = insert(n.right, value);
            n.height = Math.max(getHeight(n.left), getHeight(n.right)) + 1;
            int balance = getHeight(n.left) - getHeight(n.right);
 
            if (balance > 1){
                if (value < n.left.value){
                    return rotation(n, 1); 
                }else if (value > n.left.value){
                    n.left = rotation(n.left, 0);
                    return rotation(n, 1);
                }
            }
            else if (balance < -1)
            {
                if (value < n.right.value){
                    n.right = rotation(n.right,1);
                    return rotation(n,0);
                }else if (value > n.right.value){
                    return rotation(n,0); 
                }
            }
            return n;
        }
    }
}
