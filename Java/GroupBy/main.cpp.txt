	import java.util.*;
 
public class main
{
    private static Scanner sc = new Scanner(System.in);
    
    private static String[] lidi = {"jmeno", "prijmeni", "skupina", "pohlavi", "rok-studia", "programovaci-jazyk"};
    private static Map<Integer, String> tmp = new HashMap<>();
    private static Lidi[] s;
    private static int nos;
    
    private static class Lidi
    {
        String jmeno;
        String prijmeni;
        String skupina;
        String pohlavi;
        String rok;
        String jazyk;
 
        private Lidi(String jm, String pr, String sk, String po, String ro, String ja)
        {
            this.jmeno = jm;
            this.prijmeni = pr;
            this.skupina = sk;
            this.pohlavi = po;
            this.rok = ro;
            this.jazyk = ja;
        }
 
        private String[] getData()
        {
            return new String[]{jmeno, prijmeni, skupina, pohlavi, rok, jazyk};
        }
 
        @Override
        public String toString()
        {
            return String.format("-- %s %s (%s, %s. @ %s): %s",
                    prijmeni.toUpperCase(),
                    jmeno,
                    pohlavi,
                    rok,
                    skupina.substring(0, 2),
                    jazyk
            );
        }
    }
 
    public static void main(String[] args)
    {
        read();
        readLidi();
 
        for (int i = 0; i < tmp.size(); i++){
            Lidi[] studenti = s.clone();
            sort(studenti, tmp.get(i));
            System.out.println("Trideni dle " + tmp.get(i).toUpperCase().replace("-", "_"));
            for (int j = 0; j < lidi.length; j++){
                if (tmp.get(i).equals(lidi[j])){
                    skupiny(j, studenti);
                }
            }
        }
    }
 
    private static void sort(Lidi[] sortedStudents, String feature)
    {
        for (int i = 0; i < lidi.length; i++){
            if (feature.equals(lidi[i])){
                for (int l = 0; l < sortedStudents.length; l++){
                    for (int k = sortedStudents.length - 1; k > l; k--){
                        if ((k - 1) != l){
                            if(!sortedStudents[k].getData()[i].equals(sortedStudents[k - 1].getData()[i])){
                                if(sortedStudents[k].getData()[i].equals(sortedStudents[l].getData()[i])){
                                    Lidi pom = sortedStudents[k];
                                    sortedStudents[k] = sortedStudents[k - 1];
                                    sortedStudents[k - 1] = pom;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
 
    private static void skupiny(int index, Lidi[] sortedStudents)
    {
        String[] a = new String[nos];
        List<String> b = new ArrayList<>();
 
        for (int i = 0; i < s.length; i++){
            a[i] = s[i].getData()[index];
        }
 
        for (int i = 0; i < nos; i++){
            if (!b.contains(a[i])){
                b.add(a[i]);
            }
        }
        for (String s : b){
            System.out.format("-skupina %s:\n", s);
            for (Lidi student : sortedStudents){
                if (student.getData()[index].equals(s))
                    System.out.println(student.toString());
            }
        }
    }
 
    private static void read()
    {
        nos = Integer.parseInt(sc.nextLine());
        s = new Lidi[nos];
        for (int i = 0; i < nos; i++){
            String a = sc.nextLine();
            String[] b = a.split(" ");
            s[i] = new Lidi(b[0], b[1], b[2], String.valueOf(b[3].charAt(0)), b[4], b[5]);
        }
    }
 
    private static void readLidi()
    {
        int a = 0;
        while (sc.hasNextLine()){
            String line = sc.nextLine();
            if (line.equals("---"))
            {
                break;
            }
            tmp.put(a, line);
            a++;
        }
    }
}